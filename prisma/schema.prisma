generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Image {
  id     String  @id @default(cuid())
  url    String
  alt    String
  user   User?
  folder Folder?
}

model Group {
  id      String   @id @default(cuid())
  name    String
  folders Folder[]
}

model Folder {
  id    String @id @default(cuid())
  slug  String @unique
  title String

  authorId String
  author   User?   @relation(fields: [authorId], references: [id])
  imageId  String? @unique
  image    Image?  @relation(fields: [imageId], references: [id])

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?
  files   File[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  accounts      Account[]
  folders       Folder[]
  sessions      Session[]
  image         String
  imageId       String?
  avatarId      String?   @unique
  avatar        Image?    @relation(fields: [avatarId], references: [id])
}

model File {
  id       String @id @default(cuid())
  name     String
  slug     String @unique
  folderId String
  folder   Folder @relation(fields: [folderId], references: [id])

  notes Note[]
}

model Note {
  id       String @id @default(cuid())
  title    String
  content  String
  fileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prioritize Boolean @default(false)
  color String
  file   File @relation(fields: [fileId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
